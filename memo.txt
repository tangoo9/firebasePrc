[1]firebase 서비스
FireStore = DB
Function = serverless fuction , aws의 lambda 와 같다.
Storage = 파일저장소, aws의 S3과 같다.
hosting = 호스팅,배포
authentication = 인증기능
realtime database = 리얼타임 DB


[2].env 설정 
create-react-app으로 생성한 경우 
env의 이름은 
REACT_APP_~~~형식을 지켜야함.
(REACT_APP_API_KEY)


[3] Rotuer
### exact
exact 붙여주면 정확히 일치할때 보임.

예를들어 exact를 제거하고 
path="/" , path="/about" 으로 라우터 2개 만들었으면, /about에서도 /의 router가 보임.
=> path="/"면 exact 붙이자.

### HashRouter 
주소에 #이 붙음
정적인 페이지에 적합
검색엔진으로 읽지못함
새로고침시 에러 안남
github pages설정이 간편(배포)



[4]firebase login with Email,password

4-1.
createUserWithEmailAndPassword(email, password);
signInWithEmailAndPassword(email, password);

//공식문서, https://firebase.google.com/docs/auth/web/start?hl=ko&authuser=0

4-2.setPersistence (인증상태 지속성) local, session , none이 있음
https://firebase.google.com/docs/auth/web/auth-state-persistence?authuser=0


4-3. onAuthStateChanged
사용자 로그인 상태 변화를 관찰함, (로그인 로그아웃등 감지)
https://firebase.google.com/docs/reference/js/auth.auth?authuser=0


4-4. GoogleAuthProvider, GithubAuthProvider
소셜 아이디로 로그인하는 방법
provider = new GoogleAuthProvider ... 같이 가져와주고
signInWithPopup ... 로그인 팝업창을 띄워줄 수 있음.

4-5.로그아웃 하기
매우 심플
import { authService } from '../fbase'
authService.signOut();


[5] react-router-dom
리다이렉트 부분을 현재 버전에서는 useHistory, Redirect를 이용하여 아래와 같이 쓰는데, ("react-router-dom": "^5.3.0")

.....
<Redirect from="*" to="/"/>

const history = useHistory();
history.push("/")
.....

react-router-dom v6 이상부터는 useHistory, Redirect는 삭제됨.
=> useNavigate(hook), Navigate(component)를 사용해야함.
https://ui.dev/react-router-programmatically-navigate/

[6] firestore
firebase v9 이상..
import { getFirestore } from "firebase/firestore";
export const dbService = getFirestore();

[6-1] //collection, addDoc

addDoc : create 담당

https://firebase.google.com/docs/reference/js/firestore_.md?authuser=0&hl=ko#adddoc
import { addDoc, collection } from 'firebase/firestore';

//이런형태로 코드 사용, (async await)
const docRef = await addDoc(collection(dbService, "nweets"), {
    nweet,
    createdAt: Date.now(),
    });
console.log("Document written with ID: ", docRef.id);


[6-2]querysnapshot , getDocs

※ onSnapshot()으로 이벤트 수신, 아래같은 형태

const q = query(
    collection(dbService, "nweets"),
    orderBy("createdAt", "desc")
    );
    onSnapshot(q, (snapshot) => {
    const nweetArray = snapshot.docs.map((doc) => ({
    id: doc.id,
    ...doc.data(),
    }));
            

querysnapshot : 
    - properties : docs, metadata, size, empty, query 
    - methods : docChanges ,forEach, isEqual

getDocs : read 담당

import { getDocs, query } from 'firebase/firestore';
https://firebase.google.com/docs/reference/js/firestore_.querysnapshot?hl=ko&authuser=0


★★querySnapshot 예제문서★★
https://firebase.google.com/docs/firestore/query-data/listen?authuser=0&hl=ko#web-version-9_3


[6-3] deleteDoc, updateDoc
import { doc, deleteDoc, updateDoc }from"firebase/firestore";

//아래와 같이 리터럴 호출
const nweetDocRef = doc(dbService, "nweets", `${nweetObj.id}`)

//delete
await deleteDoc(nweetDocRef)

//update
await updateDoc(nweetDocRef,{text :newNweet})


[6-4] Image 업로드
//FileReader API...
https://developer.mozilla.org/en-US/docs/Web/API/FileReader

//firebase Storage
import { getStorage } from "firebase/storage";
...
import { ref, uploadString } from 'firebase/storage';
...
const fileRef = ref(storageService, `${userObj.uid}/${v4()}`);
const response = await uploadString(fileRef, imageFile, "data_url");

[6-5] Image 화면에 출력
//getDownloadURL
//https://firebase.google.com/docs/reference/js/storage.md?authuser=0&hl=ko#ref

import { getDownloadURL } from 'firebase/storage';
...
let AttachmentUrl ="";
//첨부파일이 없을때
if(attachment !== ""){
    // 파일경로참조 만들기 userObj.uid/${이부분은 파일명}
    const fileRef = ref(storageService, `${userObj.uid}/${v4()}`);
    //storage 참조경로로 파일 업로드
    const response = await uploadString(fileRef, attachment, "data_url");
    //storage의 파일 url로 다운로드
    AttachmentUrl = await getDownloadURL(response.ref)

}
const nweetPost = {
    text:nweet,
    createdAt: Date.now(),
    creatorId: userObj.uid,
    AttachmentUrl,
}


//Storage Rules 탭 설정 ... read,write 부분 기본적으로 if false인데 그럼 동작안함.
rules_version = '2';
service firebase.storage {
    match /b/{bucket}/o {
        match /{allPaths=**} {
        allow read, write: if request.auth != null;
        }
    }
}

[6-6] delete
import { dbService, storageService } from '../fbase'
import { deleteObject, ref } from 'firebase/storage';
...
//삭제하는 이미지 파일을 가리키는 ref
const AttachmentRef = ref(storageService, nweetObj.AttachmentUrl);
...
//이미지 파일 삭제 
await deleteObject(AttachmentRef);


[6-7] Collection getDocs

- 컬렉션에서 문서 가져오기
https://firebase.google.com/docs/firestore/query-data/get-data?hl=ko#get_multiple_documents_from_a_collection


***************************************************************
import { collection, query, where, getDocs } from "firebase/firestore";

const q = query(collection(db, "cities"), where("capital", "==", true));

const querySnapshot = await getDocs(q);
querySnapshot.forEach((doc) => {
  // doc.data() is never undefined for query doc snapshots
  console.log(doc.id, " => ", doc.data());
});
***************************************************************

- 데이터 정렬 및 제한: https://firebase.google.com/docs/firestore/query-data/order-limit-data#order_and_limit_data

[Collection Error]
DB데이터를 정렬해서 가져올려면 index가 필요한데 firebase의 경우 noSQL임, 따라서 아래의 에러를 맞이할 수 있고 해결책은 아래 링크 따라가기
 Uncaught (in promise) FirebaseError: The query requires an index. You can create it here: 
 https://console.firebase.google.com/v1/r/project/nwitterfb/firestore/indexes?create_composite=Ckhwcm9qZWN0cy9ud2l0dGVyZmIvZGF0YWJhc2VzLyhkZWZhdWx0KS9jb2xsZWN0aW9uR3JvdXBzL253ZWV0cy9pbmRleGVzL18QARoNCgljcmVhdG9ySWQQARoMCghjcmVhdGVBdBABGgwKCF9fbmFtZV9fEAE


[7] User 관련..
https://firebase.google.com/docs/auth/admin/manage-users?hl=ko
displayName 이라던가..

//유저 프로필 네임 업데이트
import { updateProfile } from 'firebase/auth';
...
//userObj는 auth관련 props, newDisplayName은 그냥 state 변수
await updateProfile(userObj, {displayName : newDisplayName})

[8]css
- input 태그
value="&rarr;" 
오른쪽 화살표 아이콘으로 보여짐, &l , &u, &d 가능

[Deploy]
- Github Pages 사용하기
    1.package.json에 아래줄 추가
        "homepage": "https://Silku.github.io/firebasePrc"
        
        github repo랑 같아야함. 아래 명령어로 체크 가능.
        $git remote -v

    2. npm i gh-pages  
        package.json , script에 추가
        "deploy" : "gh-pages -d build"
        -d는 directory 뜻

    3. "predeploy" : "npm run build",
        "deploy" : "gh-pages -d build"
        $npm run predeploy하면 build폴더를 생성해주고, 
        $npm run deploy하면 생성된 build 폴더를 배포실행

[uuid] 랜덤 unique id를 생성해줌
https://www.npmjs.com/package/uuid


[github pages에 배포시 auth issues]
아래와 같은 에러를 마주하게됨. 아래의 경로처럼 파이어베이스 콘솔에서 해결가능.
iframe.js:299 Info: The current domain is not authorized for OAuth operations. This will prevent signInWithPopup, signInWithRedirect, linkWithPopup and linkWithRedirect from working. Add your domain (silku.github.io) to the OAuth redirect domains list in the Firebase console -> Authentication -> Settings -> Authorized domains tab.

https://console.cloud.google.com/apis/credentials


[firebase security rules]
// rules documentation
https://firebase.google.com/docs/rules/get-started?authuser=0&hl=ko
//기본 보안 규칙 설정 방법
https://firebase.google.com/docs/rules/basics?authuser=0&hl=ko 

[api security]
https://console.cloud.google.com/apis/credentials

 - browser key
어플리케이션 제한사항을 설정할수 있다. 웹,android, ios에서만 동작하게끔 등
ex)
silku.github.io/firebasePrc/*
localhost



[bug]
router 변경 이벤트시 화면이 실시간으로 바뀌지 않는문제 (router 5.3.0, react18간의 호환문제) 
react-router-dom => v5.3.3 에서 버그 수정됨.
https://stackoverflow.com/questions/71832720/link-tag-inside-browserrouter-changes-only-the-url-but-doesnt-render-the-compo